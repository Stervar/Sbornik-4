{"version":3,"file":"py-editor-KuhLAVrs.js","sources":["../src/plugins/py-editor.js"],"sourcesContent":["// PyScript py-editor plugin\nimport { Hook, XWorker, dedent } from \"polyscript/exports\";\nimport { TYPES } from \"../core.js\";\n\nconst RUN_BUTTON = `<svg style=\"height:20px;width:20px;vertical-align:-.125em;transform-origin:center;overflow:visible;color:green\" viewBox=\"0 0 384 512\" aria-hidden=\"true\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\"><g transform=\"translate(192 256)\" transform-origin=\"96 0\"><g transform=\"translate(0,0) scale(1,1)\"><path d=\"M361 215C375.3 223.8 384 239.3 384 256C384 272.7 375.3 288.2 361 296.1L73.03 472.1C58.21 482 39.66 482.4 24.52 473.9C9.377 465.4 0 449.4 0 432V80C0 62.64 9.377 46.63 24.52 38.13C39.66 29.64 58.21 29.99 73.03 39.04L361 215z\" fill=\"currentColor\" transform=\"translate(-192 -256)\"></path></g></g></svg>`;\n\nlet id = 0;\nconst getID = (type) => `${type}-editor-${id++}`;\n\nconst envs = new Map();\n\nconst hooks = {\n    worker: {\n        // works on both Pyodide and MicroPython\n        onReady: ({ runAsync, io }, { sync }) => {\n            io.stdout = (line) => sync.write(line);\n            io.stderr = (line) => sync.writeErr(line);\n            sync.revoke();\n            sync.runAsync = runAsync;\n        },\n    },\n};\n\nasync function execute({ currentTarget }) {\n    const { env, pySrc, outDiv } = this;\n    const hasRunButton = !!currentTarget;\n\n    if (hasRunButton) {\n        currentTarget.disabled = true;\n        outDiv.innerHTML = \"\";\n    }\n\n    if (!envs.has(env)) {\n        const srcLink = URL.createObjectURL(new Blob([\"\"]));\n        const xworker = XWorker.call(new Hook(null, hooks), srcLink, {\n            type: this.interpreter,\n        });\n\n        const { sync } = xworker;\n        const { promise, resolve } = Promise.withResolvers();\n        envs.set(env, promise);\n        sync.revoke = () => {\n            URL.revokeObjectURL(srcLink);\n            resolve(xworker);\n        };\n    }\n\n    // wait for the env then set the target div\n    // before executing the current code\n    envs.get(env).then((xworker) => {\n        xworker.onerror = ({ error }) => {\n            if (hasRunButton) {\n                outDiv.innerHTML += `<span style='color:red'>${\n                    error.message || error\n                }</span>\\n`;\n            }\n            console.error(error);\n        };\n\n        const enable = () => {\n            if (hasRunButton) currentTarget.disabled = false;\n        };\n        const { sync } = xworker;\n        sync.write = (str) => {\n            if (hasRunButton) outDiv.innerText += `${str}\\n`;\n        };\n        sync.writeErr = (str) => {\n            if (hasRunButton) {\n                outDiv.innerHTML += `<span style='color:red'>${str}</span>\\n`;\n            }\n        };\n        sync.runAsync(pySrc).then(enable, enable);\n    });\n}\n\nconst makeRunButton = (listener, type) => {\n    const runButton = document.createElement(\"button\");\n    runButton.className = `absolute ${type}-editor-run-button`;\n    runButton.innerHTML = RUN_BUTTON;\n    runButton.setAttribute(\"aria-label\", \"Python Script Run Button\");\n    runButton.addEventListener(\"click\", listener);\n    return runButton;\n};\n\nconst makeEditorDiv = (listener, type) => {\n    const editorDiv = document.createElement(\"div\");\n    editorDiv.className = `${type}-editor-input`;\n    editorDiv.setAttribute(\"aria-label\", \"Python Script Area\");\n\n    const runButton = makeRunButton(listener, type);\n    const editorShadowContainer = document.createElement(\"div\");\n\n    // avoid outer elements intercepting key events (reveal as example)\n    editorShadowContainer.addEventListener(\"keydown\", (event) => {\n        event.stopPropagation();\n    });\n\n    editorDiv.append(runButton, editorShadowContainer);\n\n    return editorDiv;\n};\n\nconst makeOutDiv = (type) => {\n    const outDiv = document.createElement(\"div\");\n    outDiv.className = `${type}-editor-output`;\n    outDiv.id = `${getID(type)}-output`;\n    return outDiv;\n};\n\nconst makeBoxDiv = (listener, type) => {\n    const boxDiv = document.createElement(\"div\");\n    boxDiv.className = `${type}-editor-box`;\n\n    const editorDiv = makeEditorDiv(listener, type);\n    const outDiv = makeOutDiv(type);\n    boxDiv.append(editorDiv, outDiv);\n\n    return [boxDiv, outDiv];\n};\n\nconst init = async (script, type, interpreter) => {\n    const [\n        { basicSetup, EditorView },\n        { Compartment },\n        { python },\n        { indentUnit },\n        { keymap },\n        { defaultKeymap },\n    ] = await Promise.all([\n        import(/* webpackIgnore: true */ \"../3rd-party/codemirror.js\"),\n        import(/* webpackIgnore: true */ \"../3rd-party/codemirror_state.js\"),\n        import(\n            /* webpackIgnore: true */ \"../3rd-party/codemirror_lang-python.js\"\n        ),\n        import(/* webpackIgnore: true */ \"../3rd-party/codemirror_language.js\"),\n        import(/* webpackIgnore: true */ \"../3rd-party/codemirror_view.js\"),\n        import(/* webpackIgnore: true */ \"../3rd-party/codemirror_commands.js\"),\n    ]);\n\n    const isSetup = script.hasAttribute(\"setup\");\n    const env = `${interpreter}-${script.getAttribute(\"env\") || getID(type)}`;\n    const source = script.src\n        ? await fetch(script.src).then((b) => b.text())\n        : script.textContent;\n    const context = {\n        interpreter,\n        env,\n        get pySrc() {\n            return isSetup ? source : editor.state.doc.toString();\n        },\n        get outDiv() {\n            return isSetup ? null : outDiv;\n        },\n    };\n\n    if (isSetup) {\n        execute.call(context, { currentTarget: null });\n        return;\n    }\n\n    const selector = script.getAttribute(\"target\");\n\n    let target;\n    if (selector) {\n        target =\n            document.getElementById(selector) ||\n            document.querySelector(selector);\n        if (!target) throw new Error(`Unknown target ${selector}`);\n    } else {\n        target = document.createElement(`${type}-editor`);\n        target.style.display = \"block\";\n        script.after(target);\n    }\n\n    if (!target.id) target.id = getID(type);\n    if (!target.hasAttribute(\"exec-id\")) target.setAttribute(\"exec-id\", 0);\n    if (!target.hasAttribute(\"root\")) target.setAttribute(\"root\", target.id);\n\n    // @see https://github.com/JeffersGlass/mkdocs-pyscript/blob/main/mkdocs_pyscript/js/makeblocks.js\n    const listener = execute.bind(context);\n    const [boxDiv, outDiv] = makeBoxDiv(listener, type);\n    boxDiv.dataset.env = script.hasAttribute(\"env\") ? env : interpreter;\n\n    const inputChild = boxDiv.querySelector(`.${type}-editor-input > div`);\n    const parent = inputChild.attachShadow({ mode: \"open\" });\n    // avoid inheriting styles from the outer component\n    parent.innerHTML = `<style> :host { all: initial; }</style>`;\n\n    target.appendChild(boxDiv);\n\n    const doc = dedent(script.textContent).trim();\n\n    // preserve user indentation, if any\n    const indentation = /^(\\s+)/m.test(doc) ? RegExp.$1 : \"    \";\n\n    const editor = new EditorView({\n        extensions: [\n            indentUnit.of(indentation),\n            new Compartment().of(python()),\n            keymap.of([\n                ...defaultKeymap,\n                { key: \"Ctrl-Enter\", run: listener, preventDefault: true },\n                { key: \"Cmd-Enter\", run: listener, preventDefault: true },\n                { key: \"Shift-Enter\", run: listener, preventDefault: true },\n            ]),\n            basicSetup,\n        ],\n        parent,\n        doc,\n    });\n\n    editor.focus();\n};\n\n// avoid too greedy MutationObserver operations at distance\nlet timeout = 0;\n\n// avoid delayed initialization\nlet queue = Promise.resolve();\n\n// reset interval value then check for new scripts\nconst resetTimeout = () => {\n    timeout = 0;\n    pyEditor();\n};\n\n// triggered both ASAP on the living DOM and via MutationObserver later\nconst pyEditor = async () => {\n    if (timeout) return;\n    timeout = setTimeout(resetTimeout, 250);\n    for (const [type, interpreter] of TYPES) {\n        const selector = `script[type=\"${type}-editor\"]`;\n        for (const script of document.querySelectorAll(selector)) {\n            // avoid any further bootstrap by changing the type as active\n            script.type += \"-active\";\n            // don't await in here or multiple calls might happen\n            // while the first script is being initialized\n            queue = queue.then(() => init(script, type, interpreter));\n        }\n    }\n    return queue;\n};\n\nnew MutationObserver(pyEditor).observe(document, {\n    childList: true,\n    subtree: true,\n});\n\n// try to check the current document ASAP\nexport default pyEditor();\n"],"names":["id","getID","type","envs","Map","hooks","worker","onReady","runAsync","io","sync","stdout","line","write","stderr","writeErr","revoke","async","execute","currentTarget","env","pySrc","outDiv","this","hasRunButton","disabled","innerHTML","has","srcLink","URL","createObjectURL","Blob","xworker","XWorker","call","Hook","interpreter","promise","resolve","Promise","withResolvers","set","revokeObjectURL","get","then","onerror","error","message","console","enable","str","innerText","makeEditorDiv","listener","editorDiv","document","createElement","className","setAttribute","runButton","addEventListener","makeRunButton","editorShadowContainer","event","stopPropagation","append","makeBoxDiv","boxDiv","makeOutDiv","init","script","basicSetup","EditorView","Compartment","python","indentUnit","keymap","defaultKeymap","all","import","n","x","q","isSetup","hasAttribute","getAttribute","source","src","fetch","b","text","textContent","context","editor","state","doc","toString","selector","target","getElementById","querySelector","Error","style","display","after","bind","dataset","parent","attachShadow","mode","appendChild","dedent","trim","indentation","test","RegExp","$1","extensions","of","key","run","preventDefault","focus","timeout","queue","resetTimeout","pyEditor","setTimeout","TYPES","querySelectorAll","MutationObserver","observe","childList","subtree","pyEditor$1"],"mappings":"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"}